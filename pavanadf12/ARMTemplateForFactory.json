{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "pavanadf12"
		},
		"ADLSGen2_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ADLSGen2'"
		},
		"AzureSqlDatabaseAdventureLS_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabaseAdventureLS'"
		},
		"AzureSqlproductLs_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlproductLs'"
		},
		"ADLSGen2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://pavangen2.dfs.core.windows.net/"
		},
		"adf_lab_akv_linkedser_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://adf-pavan-dev-kv1.vault.azure.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/CakeJSONFalttenPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CakeFlattenJSON",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "JSONCakeFlattenDataFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceJSON": {},
									"sinkCakeJSON": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-30T11:25:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/JSONCakeFlattenDataFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DemoParseJSON')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ParseCarsJSON",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DemoParseCarData",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CarsData": {},
									"ParseCarsSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-01-02T09:43:54Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DemoParseCarData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MSFTStringifyTrans')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MSFTstringify",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "StringifyDataTrans",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceStringify": {},
									"sinkStringify": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-01-02T10:41:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/StringifyDataTrans')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MoviesAlterRows')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MoviesAlterRows",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FilterandDerivedColumns_WindowTransformation_AlterRows",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"MoviesDB": {},
									"AlterRowSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-29T11:35:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/FilterandDerivedColumns_WindowTransformation_AlterRows')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MoviesConditionalSplit')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "moviesconditionalsplit",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MoviesConditionalSplit",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"MoviesDataBase": {},
									"Conditionalsplitsink": {},
									"sinkmovies1960and1980": {},
									"sinkmoviesafter": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-27T09:43:46Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/MoviesConditionalSplit')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MoviesDB_LookUP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookUP_Dataflow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MoviesDataflowLookprimaryGenre",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"MoviesDB": {},
									"MoviesDBPrimaryGenre": {},
									"MoviesDBPrimaryGenreSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-28T10:59:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/MoviesDataflowLookprimaryGenre')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MoviesDBfilterandDerivedcolumn')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FilterandDerivedcolumn",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FilterandDerivedColumns",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"MoviesDB": {},
									"MoviesDBSinkderivedcolumn": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-27T11:12:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/FilterandDerivedColumns')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MoviesExistTransformation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MoviesExistTransformation",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MoviesExistTransformation",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ExistTransformation": {},
									"MoviesExistCopyTransformation": {},
									"MoviesExistTransformationSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-28T07:59:18Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/MoviesExistTransformation')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MoviesTransform')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MoviesTransform",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MoviesTransform",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"MoviesDB": {},
									"sink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-26T12:22:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/MoviesTransform')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PipelineParameter')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DataflowParameter",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "demodatflowparameters",
								"type": "DataFlowReference",
								"parameters": {
									"status": {
										"value": "@pipeline().parameters.status",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SourceMoviesDBPrimaryGenre": {},
									"sinkParamater": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"status": {
						"type": "string",
						"defaultValue": "\"Old\""
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-30T12:38:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/demodatflowparameters')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PivotPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Pivotdatflow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ProductPivotdataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceProduct": {},
									"ProductSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-28T12:46:39Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/ProductPivotdataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WndowTransformation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "WindowTransformation",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FilterandDerivedColumns_WindowTransformation",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"MoviesDB": {},
									"WindowTransformatioMoviesDBSinkderivedcolumn": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-29T10:07:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/FilterandDerivedColumns_WindowTransformation')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/demoflattenjsonpipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DemoFlattenJson",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "demoflattenjson",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceJSON": {},
									"JSONSInk": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-30T09:48:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/demoflattenjson')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlProductDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlproductLs",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ProductID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "ProductNumber",
						"type": "nvarchar"
					},
					{
						"name": "Color",
						"type": "nvarchar"
					},
					{
						"name": "StandardCost",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "ListPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Size",
						"type": "nvarchar"
					},
					{
						"name": "Weight",
						"type": "decimal",
						"precision": 8,
						"scale": 2
					},
					{
						"name": "ProductCategoryID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductModelID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SellStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SellEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DiscontinuedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ThumbNailPhoto",
						"type": "varbinary"
					},
					{
						"name": "ThumbnailPhotoFileName",
						"type": "nvarchar"
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "SalesLT",
					"table": "Product"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlproductLs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableMoviewAnalytics')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseAdventureLS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "MoviesAnalytics"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseAdventureLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CakeJSONSinkDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "output3012",
						"fileSystem": "sampledata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CakeJSONSinkDs')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "output3012",
						"fileSystem": "sampledata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "orderId",
						"type": "String"
					},
					{
						"name": "itemname",
						"type": "String"
					},
					{
						"name": "itemQty",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CarsParseDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "cardata",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "carsData.xlsx",
						"fileSystem": "sampledata"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "Car_id",
						"type": "String"
					},
					{
						"name": "Model",
						"type": "String"
					},
					{
						"name": "Colour",
						"type": "String"
					},
					{
						"name": "json_value",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Cars_Parse_CSV_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "output01022023",
						"fileSystem": "sampledata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedTextds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "output01022023",
						"fileSystem": "sampledata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/JsonCakeDs')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "cakes.json",
						"fileSystem": "sampledata"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"id": {
							"type": "string"
						},
						"type": {
							"type": "string"
						},
						"name": {
							"type": "string"
						},
						"ppu": {
							"type": "number"
						},
						"batters": {
							"type": "object",
							"properties": {
								"batter": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"id": {
												"type": "string"
											},
											"type": {
												"type": "string"
											}
										}
									}
								}
							}
						},
						"topping": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"id": {
										"type": "string"
									},
									"type": {
										"type": "string"
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/JsonSinkDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "output3012",
						"fileSystem": "sampledata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MoviesDB')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "moviesDB.csv",
						"fileSystem": "sampledata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "movie",
						"type": "String"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "genres",
						"type": "String"
					},
					{
						"name": "year",
						"type": "String"
					},
					{
						"name": "Rating",
						"type": "String"
					},
					{
						"name": "Rotton Tomato",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MoviesDBFilterAndDerivedSink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "output",
						"fileSystem": "sampledata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MoviesDBcopy')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "moviesDB - Copy.csv",
						"fileSystem": "samplecopydata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "movie",
						"type": "String"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "genres",
						"type": "String"
					},
					{
						"name": "year",
						"type": "String"
					},
					{
						"name": "Rating",
						"type": "String"
					},
					{
						"name": "Rotton Tomato",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MoviesExistSink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "output",
						"fileSystem": "sampledata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MoviesSink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "output",
						"fileSystem": "sampledata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParameterDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "output3012",
						"fileSystem": "sampledata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PrimaryGenreDatset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "moviesderivedcolumn.csv",
						"folderPath": "output",
						"fileSystem": "sampledata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "movie",
						"type": "String"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "year",
						"type": "String"
					},
					{
						"name": "Rating",
						"type": "String"
					},
					{
						"name": "Rotton Tomato",
						"type": "String"
					},
					{
						"name": "PrimaryGenre",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PrimarygenreSink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "output2812",
						"fileSystem": "sampledata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SinkMSFTds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "output01022023",
						"fileSystem": "sampledata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Car_id",
						"type": "String"
					},
					{
						"name": "Model",
						"type": "String"
					},
					{
						"name": "Colour",
						"type": "String"
					},
					{
						"name": "json_value",
						"type": "String"
					},
					{
						"name": "locationId",
						"type": "String"
					},
					{
						"name": "locationregion",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/demoJson')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "flattenJSONDoc.json",
						"fileSystem": "sampledata"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"name": {
							"type": "string"
						},
						"location": {
							"type": "string"
						},
						"satellites": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"goods": {
							"type": "object",
							"properties": {
								"trade": {
									"type": "boolean"
								},
								"customers": {
									"type": "array",
									"items": {
										"type": "string"
									}
								},
								"orders": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"orderId": {
												"type": "integer"
											},
											"orderTotal": {
												"type": "number"
											},
											"shipped": {
												"type": "object",
												"properties": {
													"orderItems": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"itemName": {
																	"type": "string"
																},
																"itemQty": {
																	"type": "integer"
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pivotproductdatset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "output2812",
						"fileSystem": "sampledata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sinkStringifydsJson2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "output01022023",
						"fileSystem": "sampledata"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/splitbefore1960')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "output",
						"fileSystem": "sampledata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/splitmovies1960and1980')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "output",
						"fileSystem": "sampledata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/splitmoviesafter')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "output",
						"fileSystem": "sampledata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/windowtransformatiods')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "output2912",
						"fileSystem": "sampledata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLSGen2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ADLSGen2_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ADLSGen2_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabaseAdventureLS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabaseAdventureLS_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlproductLs')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlproductLs_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/adf_lab_akv_linkedser')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('adf_lab_akv_linkedser_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DemoParseCarData')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CarsParseDataset",
								"type": "DatasetReference"
							},
							"name": "CarsData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Cars_Parse_CSV_ds",
								"type": "DatasetReference"
							},
							"name": "ParseCarsSink"
						}
					],
					"transformations": [
						{
							"name": "parseJSONFromCars"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Car_id as short,",
						"          Model as string,",
						"          Colour as string,",
						"          json_value as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CarsData",
						"CarsData parse(locationandregion = json_value ? (locationid as integer,",
						"          region as string),",
						"     format: 'json',",
						"     documentForm: 'singleDocument') ~> parseJSONFromCars",
						"parseJSONFromCars sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Carsdata.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Car_id,",
						"          Model,",
						"          Colour,",
						"          json_value,",
						"          locationId = locationandregion.locationid,",
						"          locationregion = locationandregion.region",
						"     ),",
						"     partitionBy('hash', 1)) ~> ParseCarsSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CarsParseDataset')]",
				"[concat(variables('factoryId'), '/datasets/Cars_Parse_CSV_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FilterandDerivedColumns')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MoviesDB",
								"type": "DatasetReference"
							},
							"name": "MoviesDB"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "MoviesDBFilterAndDerivedSink",
								"type": "DatasetReference"
							},
							"name": "MoviesDBSinkderivedcolumn"
						}
					],
					"transformations": [
						{
							"name": "RenameColumnRottonTomato"
						},
						{
							"name": "FilterYearBefore1951"
						},
						{
							"name": "DerivedPrimaryGenre"
						},
						{
							"name": "DropUnwantedColumn"
						}
					],
					"scriptLines": [
						"source(output(",
						"          movie as integer,",
						"          title as string,",
						"          genres as string,",
						"          year as short,",
						"          Rating as short,",
						"          {Rotton Tomato} as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> MoviesDB",
						"MoviesDB select(mapColumn(",
						"          movie,",
						"          title,",
						"          genres,",
						"          year,",
						"          Rating,",
						"          {Rotten Tomato} = {Rotton Tomato}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenameColumnRottonTomato",
						"RenameColumnRottonTomato filter((year) >1951) ~> FilterYearBefore1951",
						"FilterYearBefore1951 derive(PrimaryGenre = iif(locate('|',genres)>1, left(genres,locate('|',genres)-1), genres)) ~> DerivedPrimaryGenre",
						"DerivedPrimaryGenre select(mapColumn(",
						"          movie,",
						"          title,",
						"          year,",
						"          Rating,",
						"          {Rotten Tomato},",
						"          PrimaryGenre",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DropUnwantedColumn",
						"DropUnwantedColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['moviesderivedcolumn.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> MoviesDBSinkderivedcolumn"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MoviesDB')]",
				"[concat(variables('factoryId'), '/datasets/MoviesDBFilterAndDerivedSink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FilterandDerivedColumns_WindowTransformation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MoviesDB",
								"type": "DatasetReference"
							},
							"name": "MoviesDB"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "windowtransformatiods",
								"type": "DatasetReference"
							},
							"name": "WindowTransformatioMoviesDBSinkderivedcolumn"
						}
					],
					"transformations": [
						{
							"name": "RenameColumnRottonTomato"
						},
						{
							"name": "DerivedPrimaryGenre"
						},
						{
							"name": "DropUnwantedColumn"
						},
						{
							"name": "WindowTransformationRankingaccordingToGenre"
						},
						{
							"name": "AggregateRating"
						}
					],
					"scriptLines": [
						"source(output(",
						"          movie as integer,",
						"          title as string,",
						"          genres as string,",
						"          year as short,",
						"          Rating as short,",
						"          {Rotton Tomato} as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> MoviesDB",
						"MoviesDB select(mapColumn(",
						"          movie,",
						"          title,",
						"          genres,",
						"          year,",
						"          Rating,",
						"          {Rotten Tomato} = {Rotton Tomato}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenameColumnRottonTomato",
						"RenameColumnRottonTomato derive(PrimaryGenre = iif(locate('|',genres)>1, left(genres,locate('|',genres)-1), genres)) ~> DerivedPrimaryGenre",
						"DerivedPrimaryGenre select(mapColumn(",
						"          movie,",
						"          title,",
						"          year,",
						"          Rating,",
						"          {Rotten Tomato},",
						"          PrimaryGenre",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DropUnwantedColumn",
						"DropUnwantedColumn window(over(PrimaryGenre,",
						"          year),",
						"     asc({Rotten Tomato}, false),",
						"     RatingRank = rank()) ~> WindowTransformationRankingaccordingToGenre",
						"WindowTransformationRankingaccordingToGenre aggregate(groupBy(PrimaryGenre,",
						"          year),",
						"     AverageRating = avg({Rotten Tomato}),",
						"          HighestRated = first(title),",
						"          LowestRated = last(title),",
						"          NumberOfMovies = count()) ~> AggregateRating",
						"AggregateRating sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['MoviesWindowTransformationAggregateRating.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> WindowTransformatioMoviesDBSinkderivedcolumn"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MoviesDB')]",
				"[concat(variables('factoryId'), '/datasets/windowtransformatiods')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FilterandDerivedColumns_WindowTransformation_AlterRows')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MoviesDB",
								"type": "DatasetReference"
							},
							"name": "MoviesDB"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableMoviewAnalytics",
								"type": "DatasetReference"
							},
							"name": "AlterRowSink"
						}
					],
					"transformations": [
						{
							"name": "RenameColumnRottonTomato"
						},
						{
							"name": "DerivedPrimaryGenre"
						},
						{
							"name": "DropUnwantedColumn"
						},
						{
							"name": "WindowTransformationRankingaccordingToGenre"
						},
						{
							"name": "AggregateRating"
						},
						{
							"name": "UpsertIfTrue"
						},
						{
							"name": "MoviesIDSurrogatekey"
						}
					],
					"scriptLines": [
						"source(output(",
						"          movie as integer,",
						"          title as string,",
						"          genres as string,",
						"          year as short,",
						"          Rating as short,",
						"          {Rotton Tomato} as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> MoviesDB",
						"MoviesDB select(mapColumn(",
						"          movie,",
						"          title,",
						"          genres,",
						"          year,",
						"          Rating,",
						"          {Rotten Tomato} = {Rotton Tomato}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenameColumnRottonTomato",
						"RenameColumnRottonTomato derive(PrimaryGenre = iif(locate('|',genres)>1, left(genres,locate('|',genres)-1), genres)) ~> DerivedPrimaryGenre",
						"DerivedPrimaryGenre select(mapColumn(",
						"          movie,",
						"          title,",
						"          year,",
						"          Rating,",
						"          {Rotten Tomato},",
						"          PrimaryGenre",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DropUnwantedColumn",
						"DropUnwantedColumn window(over(PrimaryGenre,",
						"          year),",
						"     asc({Rotten Tomato}, false),",
						"     RatingRank = rank()) ~> WindowTransformationRankingaccordingToGenre",
						"WindowTransformationRankingaccordingToGenre aggregate(groupBy(PrimaryGenre,",
						"          year),",
						"     AverageRating = avg({Rotten Tomato}),",
						"          HighestRated = first(title),",
						"          LowestRated = last(title),",
						"          NumberOfMovies = count()) ~> AggregateRating",
						"AggregateRating alterRow(upsertIf(true())) ~> UpsertIfTrue",
						"UpsertIfTrue keyGenerate(output(moviesID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> MoviesIDSurrogatekey",
						"MoviesIDSurrogatekey sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['PrimaryGenre','year'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AlterRowSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MoviesDB')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableMoviewAnalytics')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/JSONCakeFlattenDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "JsonCakeDs",
								"type": "DatasetReference"
							},
							"name": "sourceJSON"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CakeJSONSinkDataSet",
								"type": "DatasetReference"
							},
							"name": "sinkCakeJSON"
						}
					],
					"transformations": [
						{
							"name": "flattenCake"
						},
						{
							"name": "flattencakefi"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as string,",
						"          type as string,",
						"          name as string,",
						"          ppu as double,",
						"          batters as (batter as (id as string, type as string)[]),",
						"          topping as (id as string, type as string)[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> sourceJSON",
						"sourceJSON foldDown(unroll(topping, topping),",
						"     mapColumn(",
						"          id,",
						"          type,",
						"          name,",
						"          ppu,",
						"          topping,",
						"          batter = batters.batter",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenCake",
						"flattenCake foldDown(unroll(batter, batter),",
						"     mapColumn(",
						"          id,",
						"          name,",
						"          ppu,",
						"          toppingID = topping.id,",
						"          type,",
						"          toppingtype = topping.type,",
						"          batterId = batter.id,",
						"          battertype = batter.type",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattencakefi",
						"flattencakefi sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['cakeflatten.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkCakeJSON"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/JsonCakeDs')]",
				"[concat(variables('factoryId'), '/datasets/CakeJSONSinkDataSet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MoviesConditionalSplit')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MoviesDB",
								"type": "DatasetReference"
							},
							"name": "MoviesDataBase"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "splitbefore1960",
								"type": "DatasetReference"
							},
							"name": "Conditionalsplitsink"
						},
						{
							"dataset": {
								"referenceName": "splitmovies1960and1980",
								"type": "DatasetReference"
							},
							"name": "sinkmovies1960and1980"
						},
						{
							"dataset": {
								"referenceName": "splitmoviesafter",
								"type": "DatasetReference"
							},
							"name": "sinkmoviesafter"
						}
					],
					"transformations": [
						{
							"name": "ConditionalSplit"
						}
					],
					"scriptLines": [
						"source(output(",
						"          movie as string,",
						"          title as string,",
						"          genres as string,",
						"          year as short,",
						"          Rating as short,",
						"          {Rotton Tomato} as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> MoviesDataBase",
						"MoviesDataBase split(year <1960,",
						"     year <1960 && year <1980,",
						"     disjoint: false) ~> ConditionalSplit@(moviesbefore1960, moviesbefore1960and1980, Moviesafter)",
						"ConditionalSplit@moviesbefore1960 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['moviesbefore1960.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> Conditionalsplitsink",
						"ConditionalSplit@moviesbefore1960and1980 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['movies1960and1980.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkmovies1960and1980",
						"ConditionalSplit@Moviesafter sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['moviesafter.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkmoviesafter"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MoviesDB')]",
				"[concat(variables('factoryId'), '/datasets/splitbefore1960')]",
				"[concat(variables('factoryId'), '/datasets/splitmovies1960and1980')]",
				"[concat(variables('factoryId'), '/datasets/splitmoviesafter')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MoviesDataflowLookprimaryGenre')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MoviesDB",
								"type": "DatasetReference"
							},
							"name": "MoviesDB"
						},
						{
							"dataset": {
								"referenceName": "PrimaryGenreDatset",
								"type": "DatasetReference"
							},
							"name": "MoviesDBPrimaryGenre"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "PrimarygenreSink",
								"type": "DatasetReference"
							},
							"name": "MoviesDBPrimaryGenreSink"
						}
					],
					"transformations": [
						{
							"name": "LookUPPrimarygenre"
						},
						{
							"name": "filterExpression"
						}
					],
					"scriptLines": [
						"source(output(",
						"          movie as string,",
						"          title as string,",
						"          genres as string,",
						"          year as string,",
						"          Rating as string,",
						"          {Rotton Tomato} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> MoviesDB",
						"source(output(",
						"          movie as string,",
						"          title as string,",
						"          year as string,",
						"          Rating as string,",
						"          {Rotton Tomato} as string,",
						"          PrimaryGenre as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> MoviesDBPrimaryGenre",
						"MoviesDB, MoviesDBPrimaryGenre lookup(genres === PrimaryGenre,",
						"     multiple: true,",
						"     broadcast: 'auto')~> LookUPPrimarygenre",
						"LookUPPrimarygenre filter(!isNull(PrimaryGenre)) ~> filterExpression",
						"filterExpression sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['MoviesDBPrimarygenre.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> MoviesDBPrimaryGenreSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MoviesDB')]",
				"[concat(variables('factoryId'), '/datasets/PrimaryGenreDatset')]",
				"[concat(variables('factoryId'), '/datasets/PrimarygenreSink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MoviesExistTransformation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MoviesDB",
								"type": "DatasetReference"
							},
							"name": "ExistTransformation"
						},
						{
							"dataset": {
								"referenceName": "MoviesDBcopy",
								"type": "DatasetReference"
							},
							"name": "MoviesExistCopyTransformation"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "MoviesExistSink",
								"type": "DatasetReference"
							},
							"name": "MoviesExistTransformationSink"
						}
					],
					"transformations": [
						{
							"name": "exists"
						}
					],
					"scriptLines": [
						"source(output(",
						"          movie as string,",
						"          title as string,",
						"          genres as string,",
						"          year as string,",
						"          Rating as string,",
						"          {Rotton Tomato} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ExistTransformation",
						"source(output(",
						"          movie as string,",
						"          title as string,",
						"          genres as string,",
						"          year as string,",
						"          Rating as string,",
						"          {Rotton Tomato} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> MoviesExistCopyTransformation",
						"ExistTransformation, MoviesExistCopyTransformation exists(ExistTransformation@movie == MoviesExistCopyTransformation@movie,",
						"     negate:false,",
						"     broadcast: 'auto')~> exists",
						"exists sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['MoviesExistTransformation.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> MoviesExistTransformationSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MoviesDB')]",
				"[concat(variables('factoryId'), '/datasets/MoviesDBcopy')]",
				"[concat(variables('factoryId'), '/datasets/MoviesExistSink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MoviesTransform')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MoviesDB",
								"type": "DatasetReference"
							},
							"name": "MoviesDB"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "MoviesSink",
								"type": "DatasetReference"
							},
							"name": "sink"
						}
					],
					"transformations": [
						{
							"name": "FiltersYears"
						},
						{
							"name": "AggregateComedyRatings"
						}
					],
					"scriptLines": [
						"source(output(",
						"          movie as string,",
						"          title as string,",
						"          genres as string,",
						"          year as string,",
						"          Rating as string,",
						"          {Rotton Tomato} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> MoviesDB",
						"MoviesDB filter(toInteger(year) >= 1910 && toInteger(year) <= 2000 && rlike(genres, 'Comedy')) ~> FiltersYears",
						"FiltersYears aggregate(groupBy(year),",
						"     Rating = avg(toInteger(Rating))) ~> AggregateComedyRatings",
						"AggregateComedyRatings sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MoviesDB')]",
				"[concat(variables('factoryId'), '/datasets/MoviesSink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProductPivotdataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlProductDS",
								"type": "DatasetReference"
							},
							"name": "SourceProduct"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "pivotproductdatset",
								"type": "DatasetReference"
							},
							"name": "ProductSink"
						}
					],
					"transformations": [
						{
							"name": "PivotSize"
						},
						{
							"name": "derivedColumnNull"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductID as integer,",
						"          Name as string,",
						"          ProductNumber as string,",
						"          Color as string,",
						"          StandardCost as decimal(19,4),",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          Weight as decimal(8,2),",
						"          ProductCategoryID as integer,",
						"          ProductModelID as integer,",
						"          SellStartDate as timestamp,",
						"          SellEndDate as timestamp,",
						"          DiscontinuedDate as timestamp,",
						"          ThumbNailPhoto as binary,",
						"          ThumbnailPhotoFileName as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> SourceProduct",
						"derivedColumnNull pivot(groupBy(Size),",
						"     pivotBy(Color),",
						"     {avg } = avg(StandardCost),",
						"     columnNaming: '$N_$VCalculatedCost',",
						"     lateral: true) ~> PivotSize",
						"SourceProduct derive(Size = iif(isNull(Size) || Size == 'NULL','NA',Size),",
						"          Color = iif(isNull(Color) || Color == 'NULL','NA',Color)) ~> derivedColumnNull",
						"PivotSize sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['PivotProduct.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ProductSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlProductDS')]",
				"[concat(variables('factoryId'), '/datasets/pivotproductdatset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/StringifyDataTrans')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "demoJson",
								"type": "DatasetReference"
							},
							"name": "sourceStringify"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SinkMSFTds",
								"type": "DatasetReference"
							},
							"name": "sinkStringify"
						}
					],
					"transformations": [
						{
							"name": "stringify"
						}
					],
					"scriptLines": [
						"source(output(",
						"          name as string,",
						"          location as string,",
						"          satellites as string[],",
						"          goods as (trade as boolean, customers as string[], orders as (orderId as integer, orderTotal as double, shipped as (orderItems as (itemName as string, itemQty as integer)[]))[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'singleDocument') ~> sourceStringify",
						"sourceStringify stringify(AllOrders = goods.orders ? string,",
						"     format: 'json') ~> stringify",
						"stringify sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Car_id as string,",
						"          Model as string,",
						"          Colour as string,",
						"          json_value as string,",
						"          locationId as string,",
						"          locationregion as string",
						"     ),",
						"     partitionFileNames:['MSFTSTringify.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          name,",
						"          location,",
						"          satellites,",
						"          AllOrders",
						"     ),",
						"     partitionBy('hash', 1)) ~> sinkStringify"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/demoJson')]",
				"[concat(variables('factoryId'), '/datasets/SinkMSFTds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/demoColumnPatternMovieAnalytics')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableMoviewAnalytics",
								"type": "DatasetReference"
							},
							"name": "MovieAnalytics"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedTextds",
								"type": "DatasetReference"
							},
							"name": "sink"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn"
						}
					],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> MovieAnalytics",
						"MovieAnalytics derive(each(match(like(name,'%Rating%')&&type=='short'), $$ = toFloat($$)),",
						"          each(match(type=='double'), $$ = round($$,0))) ~> derivedColumn",
						"derivedColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableMoviewAnalytics')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedTextds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/demodatflowparameters')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MoviesDB",
								"type": "DatasetReference"
							},
							"name": "SourceMoviesDBPrimaryGenre"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ParameterDS",
								"type": "DatasetReference"
							},
							"name": "sinkParamater"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumnParameters"
						}
					],
					"scriptLines": [
						"parameters{",
						"     status as string (\"old\")",
						"}",
						"source(output(",
						"          movie as string,",
						"          title as string,",
						"          genres as string,",
						"          year as string,",
						"          Rating as string,",
						"          {Rotton Tomato} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceMoviesDBPrimaryGenre",
						"SourceMoviesDBPrimaryGenre derive(status = iif(toInteger(year)<=1980,$status,'New')) ~> DerivedColumnParameters",
						"DerivedColumnParameters sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Parametr.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkParamater"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MoviesDB')]",
				"[concat(variables('factoryId'), '/datasets/ParameterDS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/demoflattenjson')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "demoJson",
								"type": "DatasetReference"
							},
							"name": "SourceJSON"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "JsonSinkDataSet",
								"type": "DatasetReference"
							},
							"name": "JSONSInk"
						}
					],
					"transformations": [
						{
							"name": "FlattenJSONTransformation"
						}
					],
					"scriptLines": [
						"source(output(",
						"          name as string,",
						"          location as string,",
						"          satellites as string[],",
						"          goods as (trade as boolean, customers as string[], orders as (orderId as integer, orderTotal as double, shipped as (orderItems as (itemName as string, itemQty as integer)[]))[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> SourceJSON",
						"SourceJSON foldDown(unroll(goods.orders.shipped.orderItems, goods.orders),",
						"     mapColumn(",
						"          orderId = goods.orders.orderId,",
						"          itemname = goods.orders.shipped.orderItems.itemName,",
						"          itemQty = goods.orders.shipped.orderItems.itemQty",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenJSONTransformation",
						"FlattenJSONTransformation sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> JSONSInk"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/demoJson')]",
				"[concat(variables('factoryId'), '/datasets/JsonSinkDataSet')]"
			]
		}
	]
}